<?php
namespace HappyRay\PhpInterview;

/**
 * Generated by PHPUnit_test_Generator.
 */
class AnagramStringsGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \HappyRay\PhpInterview\AnagramStrings::getSignature
     * @covers \HappyRay\PhpInterview\AnagramStrings
     */
    public function testGetSignature()
    {
        // Execute the method under test.

        $objectUnderTest = new \HappyRay\PhpInterview\AnagramStrings();

        $reflectionClass = new \ReflectionClass('\\HappyRay\\PhpInterview\\AnagramStrings');
        $reflectionMethod = $reflectionClass->getMethod('getSignature');
        $reflectionMethod->setAccessible(true);
        $executionResult = $reflectionMethod->invokeArgs($objectUnderTest, ["Hello"]);

        // Validate the execution result.

        $expected = 'e1h1l2o1';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \HappyRay\PhpInterview\AnagramStrings::getSignature
     * @covers \HappyRay\PhpInterview\AnagramStrings
     */
    public function testGetSignature_filter_space()
    {
        // Execute the method under test.

        $objectUnderTest = new \HappyRay\PhpInterview\AnagramStrings();

        $reflectionClass = new \ReflectionClass('\\HappyRay\\PhpInterview\\AnagramStrings');
        $reflectionMethod = $reflectionClass->getMethod('getSignature');
        $reflectionMethod->setAccessible(true);
        $executionResult = $reflectionMethod->invokeArgs($objectUnderTest, ['a b']);

        // Validate the execution result.

        $expected = 'a1b1';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \HappyRay\PhpInterview\AnagramStrings::getSignature
     * @covers \HappyRay\PhpInterview\AnagramStrings
     */
    public function testGetSignature_filter_punctuation()
    {
        // Execute the method under test.

        $objectUnderTest = new \HappyRay\PhpInterview\AnagramStrings();

        $reflectionClass = new \ReflectionClass('\\HappyRay\\PhpInterview\\AnagramStrings');
        $reflectionMethod = $reflectionClass->getMethod('getSignature');
        $reflectionMethod->setAccessible(true);
        $executionResult = $reflectionMethod->invokeArgs($objectUnderTest, ['a!']);

        // Validate the execution result.

        $expected = 'a1';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \HappyRay\PhpInterview\AnagramStrings::isAnagram
     * @covers \HappyRay\PhpInterview\AnagramStrings
     */
    public function testIsAnagram_true()
    {
        // Execute the method under test.

        $objectUnderTest = new \HappyRay\PhpInterview\AnagramStrings();

        $executionResult = $objectUnderTest->isAnagram('abb', 'bab');

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \HappyRay\PhpInterview\AnagramStrings::isAnagram
     * @covers \HappyRay\PhpInterview\AnagramStrings
     */
    public function testIsAnagram_false()
    {
        // Execute the method under test.

        $objectUnderTest = new \HappyRay\PhpInterview\AnagramStrings();

        $executionResult = $objectUnderTest->isAnagram('ab', 'a');

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
